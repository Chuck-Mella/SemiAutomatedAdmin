$Burn2ISO = [Ordered]@{
    cmdContent = (Dec64 'VGl0bGU9Q3JlYXRpbmcgSVNPIEltYWdlIGZyb20gIiUxIg0KSWYgW109PVslMV0gRXhpdA0KIiVTeXN0ZW1Sb290JVxzeXN0ZW0zMlxXaW5kb3dzUG93ZXJTaGVsbFx2MS4wXHBvd2Vyc2hlbGwuZXhlIiAtTm9Qcm9maWxlIC1FeGVjdXRpb25Qb2xpY3kgQnlwYXNzIC1GaWxlICJDOlxVc2Vyc1xQdWJsaWNcRHJhZzJJU08ucHMxIiAtc3JjRGlyICUxDQo6UGF1c2UNCg==')
    ps1Content = (Dec64 'UGFyYW0gKCRzcmNEaXIpCkZ1bmN0aW9uIE5ldy1Jc29GaWxlDQp7DQogICAgPCMgDQogICAgICAgIC5TeW5vcHNpcyANCiAgICAgICAgQ3JlYXRlcyBhIG5ldyAuaXNvIGZpbGUNCiAgICAgICAgDQogICAgICAgIC5EZXNjcmlwdGlvbiANCiAgICAgICAgVGhlIE5ldy1Jc29GaWxlIGNtZGxldCBjcmVhdGVzIGEgbmV3IC5pc28gZmlsZSBjb250YWluaW5nIGNvbnRlbnQgZnJvbQ0KICAgICAgICBjaG9zZW4gZm9sZGVycyANCiAgICAgICANCiAgICAgICAgLkV4YW1wbGUgDQogICAgICAgIE5ldy1Jc29GaWxlICJjOlx0b29scyIsImM6RG93bmxvYWRzXHV0aWxzIiANCg0KICAgICAgICAgICAgVGhpcyBjb21tYW5kIGNyZWF0ZXMgYSAuaXNvIGZpbGUgaW4gJGVudjp0ZW1wIGZvbGRlciAoZGVmYXVsdA0KICAgICAgICAgICAgbG9jYXRpb24pIHRoYXQgY29udGFpbnMgYzpcdG9vbHMgYW5kIGM6XGRvd25sb2Fkc1x1dGlscyBmb2xkZXJzLg0KICAgICAgICAgICAgVGhlIGZvbGRlcnMgdGhlbXNlbHZlcyBhcmUgYWRkZWQgaW4gdGhlIHJvb3Qgb2YgdGhlIC5pc28gaW1hZ2UuDQogICAgICAgICAgICAgDQogICAgICAgIGRpciBjOlxXaW5QRSB8IA0KICAgICAgICAgICAgTmV3LUlzb0ZpbGUgLVBhdGggYzpcdGVtcFxXaW5QRS5pc28gYA0KICAgICAgICAgICAgICAgICAgICAgICAgLUJvb3RGaWxlIGV0ZnNib290LmNvbSBgDQogICAgICAgICAgICAgICAgICAgICAgICAtTWVkaWEgRFZEUExVU1IgYA0KICAgICAgICAgICAgICAgICAgICAgICAgLVRpdGxlICJXaW5QRSIgDQoNCiAgICAgICAgICAgIFRoaXMgY29tbWFuZCBjcmVhdGVzIGEgYm9vdGFibGUgLmlzbyBmaWxlIGNvbnRhaW5pbmcgdGhlDQogICAgICAgICAgICBjb250ZW50IGZyb20gYzpcV2luUEUgZm9sZGVyLCBidXQgdGhlIGZvbGRlciBpdHNlbGYgaXNuJ3QgaW5jbHVkZWQuDQogICAgICAgICAgICBCb290IGZpbGUgZXRmc2Jvb3QuY29tIGNhbiBiZSBmb3VuZCBpbiBXaW5kb3dzIEFJSy4NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgUmVmZXIgdG8gSU1BUElfTUVESUFfUEhZU0lDQUxfVFlQRSBlbnVtZXJhdGlvbiBmb3IgcG9zc2libGUNCiAgICAgICAgICAgIG1lZGlhIHR5cGVzOiANCiAgICAgICAgICAgIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS93aW5kb3dzL2Rlc2t0b3AvYWEzNjYyMTcodj12cy44NSkuYXNweCANCiAgICAjPiANCiAgICBQYXJhbQ0KICAgICggDQogICAgICAgIFtwYXJhbWV0ZXIoUG9zaXRpb249MCxNYW5kYXRvcnk9JHRydWUsVmFsdWVGcm9tUGlwZWxpbmU9JHRydWUpXSRTb3VyY2UsDQogICAgICAgIFtwYXJhbWV0ZXIoUG9zaXRpb249MSxNYW5kYXRvcnk9JGZhbHNlLFZhbHVlRnJvbVBpcGVsaW5lPSR0cnVlKV1bQWxpYXMoJ1BhdGgnKV0NCiAgICAgICAgW1N0cmluZ10gJHRyZ1BhdGggPSAiJCgkZW52OnVzZXJwcm9maWxlKVxEZXNrdG9wXCQoKEdldC1EYXRlKS5Ub1N0cmluZygieXl5eU1NZGQtSEhtbXNzLmZmZmYiKSkuaXNvIiwgDQogICAgICAgIFtzdHJpbmddICRCb290RmlsZSA9ICRudWxsLCANCiAgICAgICAgW3N0cmluZ10gJE1lZGlhID0gIkRpc2siLCANCiAgICAgICAgW3N0cmluZ10gJFRpdGxlID0gKEdldC1EYXRlKS5Ub1N0cmluZygieXl5eU1NZGQtSEhtbXNzLmZmZmYiKSwgDQogICAgICAgIFtzd2l0Y2hdICRGb3JjZSANCiAgICApDQogICAgQmVnaW4NCiAgICB7DQogICAgICAgICMgRGVjb2RlIGhlcmUgc3RyaW5nIGZvciBJU08gcHVibGljIGNsYXNzIGRlZmluaXRpb24NCiAgICAgICAgRnVuY3Rpb24gRGVjNjQoJGEpeyRiID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6QVNDSUkuR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJGEpKTtSZXR1cm4gJGJ9ICMNCiAgICAgICAgKCRjcCA9IG5ldy1vYmplY3QgU3lzdGVtLkNvZGVEb20uQ29tcGlsZXIuQ29tcGlsZXJQYXJhbWV0ZXJzKS5Db21waWxlck9wdGlvbnMgPSAiL3Vuc2FmZSIgDQogICAgICAgIElmICghKCJJU09GaWxlIiAtYXMgW3R5cGVdKSkNCiAgICAgICAgeyANCiAgICAgICAgICAgICRUeXBlID0gKERlYzY0ICJjSFZpYkdsaklHTnNZWE56SUVsVFQwWnBiR1VOQ25zTkNpQWdJQ0J3ZFdKc2FXTWcNCiAgICAgICAgICAgICAgICBkVzV6WVdabElITjBZWFJwWXlCMmIybGtJRU55WldGMFpTaHpkSEpwYm1jZ1VHRjBhQ3dnYjJKcVpXTg0KICAgICAgICAgICAgICAgIDBJRk4wY21WaGJTd2dhVzUwSUVKc2IyTnJVMmw2WlN3Z2FXNTBJRlJ2ZEdGc1FteHZZMnR6S1EwS0lDDQogICAgICAgICAgICAgICAgQWdJSHNOQ2lBZ0lDQWdJQ0FnYVc1MElHSjVkR1Z6SUQwZ01Ec05DaUFnSUNBZ0lDQWdZbmwwWlZ0ZEkNCiAgICAgICAgICAgICAgICBHSjFaaUE5SUc1bGR5QmllWFJsVzBKc2IyTnJVMmw2WlYwN0RRb2dJQ0FnSUNBZ0lGTjVjM1JsYlM1Sg0KICAgICAgICAgICAgICAgIGJuUlFkSElnY0hSeUlEMGdLRk41YzNSbGJTNUpiblJRZEhJcEtDWmllWFJsY3lrN0RRb2dJQ0FnSUNBDQogICAgICAgICAgICAgICAgZ0lGTjVjM1JsYlM1SlR5NUdhV3hsVTNSeVpXRnRJRzhnUFNCVGVYTjBaVzB1U1U4dVJtbHNaUzVQY0cNCiAgICAgICAgICAgICAgICBWdVYzSnBkR1VvVUdGMGFDazdEUW9nSUNBZ0lDQWdJRk41YzNSbGJTNVNkVzUwYVcxbExrbHVkR1Z5Yg0KICAgICAgICAgICAgICAgIDNCVFpYSjJhV05sY3k1RGIyMVVlWEJsY3k1SlUzUnlaV0Z0SUdrZ1BTQlRkSEpsWVcwZ1lYTWdVM2x6DQogICAgICAgICAgICAgICAgZEdWdExsSjFiblJwYldVdVNXNTBaWEp2Y0ZObGNuWnBZMlZ6TGtOdmJWUjVjR1Z6TGtsVGRISmxZVzANCiAgICAgICAgICAgICAgICA3RFFvTkNpQWdJQ0FnSUNBZ2FXWWdLRzhnUFQwZ2JuVnNiQ2tnZXlCeVpYUjFjbTQ3SUgwTkNpQWdJQw0KICAgICAgICAgICAgICAgIEFnSUNBZ2QyaHBiR1VnS0ZSdmRHRnNRbXh2WTJ0ekxTMGdQaUF3S1NCN0RRb2dJQ0FnSUNBZ0lDQWdJDQogICAgICAgICAgICAgICAgQ0JwTGxKbFlXUW9ZblZtTENCQ2JHOWphMU5wZW1Vc0lIQjBjaWs3SUc4dVYzSnBkR1VvWW5WbUxDQXcNCiAgICAgICAgICAgICAgICBMQ0JpZVhSbGN5azdEUW9nSUNBZ0lDQWdJSDBOQ2lBZ0lDQWdJQ0FnYnk1R2JIVnphQ2dwT3lCdkxrTg0KICAgICAgICAgICAgICAgIHNiM05sS0NrN0RRb2dJQ0FnZlEwS2ZRPT0iKQ0KICAgICAgICAgICAgQWRkLVR5cGUgLUNvbXBpbGVyUGFyYW1ldGVycyAkY3AgLVR5cGVEZWZpbml0aW9uICRUeXBlICMtSWdub3JlV2FybmluZ3MNCiAgICAgICAgfSAjSWYNCiAgICAgICAgSWYgKCRCb290RmlsZSAtYW5kIChUZXN0LVBhdGggJEJvb3RGaWxlKSkNCiAgICAgICAgeyANCiAgICAgICAgICAgICgkU3RyZWFtID0gTmV3LU9iamVjdCAtQ29tT2JqZWN0IEFET0RCLlN0cmVhbSkuT3BlbigpIA0KICAgICAgICAgICAgJFN0cmVhbS5UeXBlID0gMSAgIyBhZEZpbGVUeXBlQmluYXJ5IA0KICAgICAgICAgICAgJFN0cmVhbS5Mb2FkRnJvbUZpbGUoKEdldC1JdGVtICRCb290RmlsZSkuRnVsbG5hbWUpIA0KICAgICAgICAgICAgKCRCb290ID0gTmV3LU9iamVjdCAtQ29tT2JqZWN0IElNQVBJMkZTLkJvb3RPcHRpb25zKS5Bc3NpZ25Cb290SW1hZ2UoJFN0cmVhbSkgDQogICAgICAgIH0gI0lmIA0KICAgICAgICAkTWVkaWFUeXBlID0gW09yZGVyZWRdQHtCRFI9MTg7IEJEUkU9MTk7Q0RSPTI7IENEUlc9MztESVNLPTEyOw0KICAgICAgICAgICAgICAgICAgICAgICAgRFZEREFTSFI9OTtEVkREQVNIUlc9MTA7RFZEREFTSFJfRFVBTExBWUVSPTExOw0KICAgICAgICAgICAgICAgICAgICAgICAgRFZEUExVU1I9NjsgRFZEUExVU1JXPTc7RFZEUExVU1JfRFVBTExBWUVSPTg7DQogICAgICAgICAgICAgICAgICAgICAgICBEVkRQTFVTUldfRFVBTExBWUVSPTEzO0RWRFJBTT01O30gI01lZGlhVHlwZQ0KICAgICAgICBJZiAoJE1lZGlhVHlwZVskTWVkaWFdIC1lcSAkbnVsbCkNCiAgICAgICAgew0KICAgICAgICAgICAgd3JpdGUtZGVidWcgIlVuc3VwcG9ydGVkIE1lZGlhIFR5cGU6ICRNZWRpYSI7DQogICAgICAgICAgICB3cml0ZS1kZWJ1ZyAoIkNob29zZSBvbmUgZnJvbTogIiArICRNZWRpYVR5cGUuS2V5cyk7DQogICAgICAgICAgICBCcmVhaw0KICAgICAgICB9ICNJZg0KICAgICAgICAoJEltYWdlID0gbmV3LW9iamVjdCAtY29tIElNQVBJMkZTLk1zZnRGaWxlU3lzdGVtSW1hZ2UgYA0KICAgICAgICAgICAgLVByb3BlcnR5IEB7Vm9sdW1lTmFtZT0kVGl0bGV9KS5DaG9vc2VJbWFnZURlZmF1bHRzRm9yTWVkaWFUeXBlKCRNZWRpYVR5cGVbJE1lZGlhXSkgDQogICAgICAgIElmICgoVGVzdC1QYXRoICR0cmdQYXRoKSAtYW5kICghJEZvcmNlKSkNCiAgICAgICAgew0KICAgICAgICAgICAgIkZpbGUgRXhpc3RzICR0cmdQYXRoIg0KICAgICAgICAgICAgQnJlYWsNCiAgICAgICAgfSANCiAgICAgICAgSWYgKCEoJFRhcmdldCA9IE5ldy1JdGVtIC1QYXRoICR0cmdQYXRoIC1JdGVtVHlwZSBGaWxlIC1Gb3JjZSkpDQogICAgICAgIHsNCiAgICAgICAgICAgICJDYW5ub3QgY3JlYXRlIGZpbGUgJHRyZ1BhdGgiDQogICAgICAgICAgICBCcmVhaw0KICAgICAgICB9IA0KICAgIH0gI0JlZ2luDQogICAgUHJvY2VzcyB7IA0KICAgICAgICBTd2l0Y2ggKCRTb3VyY2UpDQogICAgICAgIHsgDQogICAgICAgICAgICB7ICRfIC1pcyBbc3RyaW5nXSB9DQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRJbWFnZS5Sb290LkFkZFRyZWUoKEdldC1JdGVtICRfKS5GdWxsTmFtZSwgJHRydWUpDQogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgICAgICAgICB9IA0KICAgICAgICAgICAgeyAkXyAtaXMgW0lPLkZpbGVJbmZvXSB9DQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRJbWFnZS5Sb290LkFkZFRyZWUoJF8uRnVsbE5hbWUsICR0cnVlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICAgICAgfSANCiAgICAgICAgICAgIHsgJF8gLWlzIFtJTy5EaXJlY3RvcnlJbmZvXSB9DQogICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRJbWFnZS5Sb290LkFkZFRyZWUoJF8uRnVsbE5hbWUsICR0cnVlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICAgICAgfSANCiAgICAgICAgfSNTd2l0Y2ggDQogICAgfSAjUHJvY2VzcyANCiAgICBFbmQNCiAgICB7IA0KICAgICAgICBJZiAoJEJvb3QpDQogICAgICAgIHsNCiAgICAgICAgICAgICRJbWFnZS5Cb290SW1hZ2VPcHRpb25zPSRCb290DQogICAgICAgIH0gDQogICAgICAgICRSZXN1bHQgPSAkSW1hZ2UuQ3JlYXRlUmVzdWx0SW1hZ2UoKSANCiAgICAgICAgW0lTT0ZpbGVdOjpDcmVhdGUoJFRhcmdldC5GdWxsTmFtZSwkUmVzdWx0LkltYWdlU3RyZWFtLCRSZXN1bHQuQmxvY2tTaXplLCRSZXN1bHQuVG90YWxCbG9ja3MpIA0KICAgICAgICAkVGFyZ2V0IA0KICAgIH0gI0VuZCANCg0KfQ0KSWYgKChUZXN0LVBhdGggJHNyY0RpcikgLWVxICRGYWxzZSl7fQojIEl5QkpSVmdnSWtaMWJtTjBhVzl1SUU1bGR5MUpjMjlHYVd4bElIdGdiaVJPWlhkSlUwOWdibUIwZlNBalRtVjNMVWx6YjBacGJHVWkKJHdyaXRlRGF0ZSA9IEdldC1EYXRlIC1mIHl5eXlNTWRkCkdDSSAkc3JjRGlyIHwKICAgIE5ldy1JU09GaWxlIC1QYXRoICIkc3JjRGlyLmlzbyIgYAogICAgICAgICAgICAgICAgLVRpdGxlICgkc3JjRGlyLlNwbGl0KCdcJylbLTFdKSBgCiAgICAgICAgICAgICAgICAtRm9yY2UgCiAgICAgICAgICAgICAgICAjLUJvb3RGaWxlICI8UEFUSD5cYm9vdFxldGZzYm9vdC5jb20iIGA=')
    lnkPath = "C:\Users\Public\Desktop\2Burn.lnk"
    cmdPath = "C:\Users\Public\2Burn.cmd"
    ps1Path = "C:\Users\Public\Drag2ISO.ps1"
    }

$Burn2ISO.cmdContent | Set-Content $Burn2ISO.cmdPath -Encoding Ascii -Force
$Burn2ISO.ps1Content | Set-Content $Burn2ISO.ps1Path -Encoding Ascii -Force
$wsh = New-Object -ComObject wSCRIPT.SHELL;
$rslt = $wsh.CreateShortcut($Burn2ISO.lnkPath)
    $rslt.Description = 'Drop folder here to convert to ISO'
    $rslt.IconLocation = '%SystemRoot%\System32\SHELL32.dll,157'
    $rslt.TargetPath = $Burn2ISO.cmdPath
    $rslt.WindowStyle = 1
    $rslt.Save()
